buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

defaultTasks 'build'
apply plugin: 'forge'
apply plugin: 'maven-publish'

ext.mixinSrg = new File(project.buildDir, "tmp/mixins/mixins.notenoughkeys.srg")
ext.mixinRefMap = new File(project.buildDir, "tmp/mixins/notenoughkeys.mixin.refmap.json")

reobf.addExtraSrgFile project.mixinSrg

task makePretty(type: Delete) {
  delete 'output'
}

clean{
   dependsOn makePretty
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'sonatype-nexus'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }

    // Add Sponge repo for custom checkstyle implementation to fix some wrong warnings
    maven {
        name = "sponge-public"
        url = "http://repo.spongepowered.org/maven/"
    }
}

ext.buildProps = file "build.properties"

buildProps.withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = "${config.version.minecraft}-${config.version.mod.major}.${config.version.mod.minor}.${config.version.mod.revis}b"
group = "notenoughkeys"
archivesBaseName = "NotEnoughKeys"

minecraft {
    version = "${config.version.minecraft}-${config.version.forge}"
    runDir = "run"
    mappings = "snapshot_20140925"
}

dependencies {
    compile "org.spongepowered:mixin:0.3.1-SNAPSHOT"
}

processResources {
	from(sourceSets.main.resources.srcDirs) {
		include '**/*.lang'
		include '**/*.info'
		include '**/*.properties'

		expand 'version': project.version, 'mcversion': config.version.minecraft
		// replace version and MCVersion
	}

	// copy everything else, thats not text
	from(sourceSets.main.resources.srcDirs) {
		exclude '**/*.lang'
		exclude '**/*.info'
		exclude '**/*.properties'
	}
}

def defaultEncoding = 'UTF-8'
compileJava {
    options.compilerArgs += [
            '-Xlint:all',
            '-Xlint:-path',
            '-Xlint:-processing',
            "-AoutSrgFile=${project.mixinSrg.getCanonicalPath()}",
            "-AoutRefMapFile=${project.mixinRefMap.getCanonicalPath()}"
    ]
    options.deprecation = true
    options.encoding = defaultEncoding
}

afterEvaluate {
    tasks.compileJava.options.compilerArgs += "-AreobfSrgFile=${tasks.reobf.srg}"
}

task copySrgs(type: Copy, dependsOn: "genSrgs") {
    from plugins.getPlugin("forge").delayedFile("{SRG_DIR}")

    include '**/*.srg'
    into 'build/srgs'
}

setupDecompWorkspace.dependsOn copySrgs
setupDevWorkspace.dependsOn copySrgs

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = "deobf" 
    destinationDir = file 'output'
}

artifacts {
    archives deobfJar
}

def manifestEntries = [
        "Built-By": System.properties['user.name'],
        "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        "FMLCorePlugin": "modwarriors.notenoughkeys.coremod.NotEnoughKeysCoremod",
        "FMLCorePluginContainsFMLMod": 'true'
]

jar {
    from project.mixinRefMap
    manifest.mainAttributes(manifestEntries)
    destinationDir = file 'output'
}


